@inject IPageHeadBuilder pagebuilder

@{
    Layout = "_SingleColumn";
}
<div id="customizeContainer">
    <canvas class="w-100" id="customizeCanvas"></canvas>
    <button @@click="customizeApp.changeCamera('helmet')"> Change Camera</button>
    <button @@click="customizeApp.changeMaterial('helmet')"> Change Texture</button>
</div>


<script asp-location="Footer" asp-order="301">
    // Working play ground https://playground.babylonjs.com/#3AQQI8#2
    var customizeApp = new Vue({
        data: {
            scene: null,
            camera: null,
            canvas: null, 
            light: null,            
            cameraInitialSetting:{
                    alpha: Math.PI * 0.8,
                    beta: Math.PI * 0.5,
                    radius: 50,
                    target: new BABYLON.Vector3(0, 0, 0),
                    upperAlphaLimit: 3.1367,
                    lowerBetaLimit: 0.7026,
                    upperBetaLimit:1.9971,
                    lowerRadiusLimit:50,
                    upperRadiusLimit:50
            },
            meshes:[
                {
                    name:"helmet",
                    cameraSetting:{
                        alpha: Math.PI * 0.8,
                        beta: Math.PI * 0.39,
                        radius: 55
                    }
                }
                // Mesh should contain
                //1. all the mesh
                // available material or color
                // camera position
            ],
            canvas: null,
            light: null,
            cameraInitialSetting: {
                alpha: Math.PI * 0.8,
                beta: Math.PI * 0.5,
                radius: 60,
                target: new BABYLON.Vector3(0, 0, 0)
            },
            // load from database
            productData: {
                url: "https://raw.githubusercontent.com/namhoaingo/grandnode2Forked/Nam/resizeEvent/vue-balylon/b101/public/",
                meshes: [
                    {
                        name: "helmet",
                        cameraSetting: {
                            alpha: Math.PI * 0.8,
                            beta: Math.PI * 0.39,
                            radius: 55
                        },
                        availableMaterials: [
                            {
                                name: "sonnhung1",
                                url: "",
                                price: 50
                            },
                            {
                                name: "sonnhung2",
                                url: "",
                                price: 51
                            },
                            {
                                name: "sonnhung3",
                                url: "",
                                price: 52
                            }
                        ]
                    },
                    {
                        name: "lottrong",
                        cameraSetting: {
                            alpha: Math.PI * 0.8,
                            beta: Math.PI * 0.39,
                            radius: 55
                        }
                    },
                    {
                        name: "lotngoai",
                        cameraSetting: {
                            alpha: Math.PI * 0.8,
                            beta: Math.PI * 0.39,
                            radius: 55
                        }
                    },
                    {
                        name: "lotcam",
                        cameraSetting: {
                            alpha: Math.PI * 0.8,
                            beta: Math.PI * 0.39,
                            radius: 55
                        }
                    },
                    {
                        name: "quai",
                        cameraSetting: {
                            alpha: Math.PI * 0.8,
                            beta: Math.PI * 0.39,
                            radius: 55
                        }
                    },
                    {
                        name: "quainum",
                        cameraSetting: {
                            alpha: Math.PI * 0.8,
                            beta: Math.PI * 0.39,
                            radius: 55
                        }
                    },
                    {
                        name: "quaisau",
                        cameraSetting: {
                            alpha: Math.PI * 0.8,
                            beta: Math.PI * 0.39,
                            radius: 55
                        }
                    }
                ],
            }


        },
        methods: {
            bootstrapApp: function () {

                this.canvas = document.getElementById("customizeCanvas");
                this.engine = new BABYLON.Engine(this.canvas, true);
                // This creates a basic Babylon Scene object (non-mesh)
                this.scene = new BABYLON.Scene(this.engine);
                this.scene.clearColor = new BABYLON.Color3(1,1,1);
                this.camera = new BABYLON.ArcRotateCamera("camera"
                                        , this.cameraInitialSetting.alpha
                                        , this.cameraInitialSetting.beta
                                        , this.cameraInitialSetting.radius
                                        , this.cameraInitialSetting.target
                                        , this.scene);
                this.camera.upperAlphaLimit = this.cameraInitialSetting.upperAlphaLimit;
                this.camera.lowerBetaLimit = this.cameraInitialSetting.lowerBetaLimit;
                this.camera.upperBetaLimit = this.cameraInitialSetting.upperBetaLimit;
                this.camera.lowerRadiusLimit = this.cameraInitialSetting.lowerRadiusLimit;
                this.camera.upperRadiusLimit = this.cameraInitialSetting.upperRadiusLimit;
                this.camera.setTarget(new BABYLON.Vector3(0, 0, 0));
                this.camera.attachControl();             
                this.camera.attachControl();

                this.camera.attachControl();
                this.light = new BABYLON.HemisphericLight("hemiLight", new BABYLON.Vector3(0, 40, 0), this.scene);

                this.createOverlay();
                // load model
                var loader = new BABYLON.AssetsManager(this.scene);
                var meshes = this.productData.meshes.map(mesh => mesh.name);
                var loadHelmetModel = loader.addMeshTask("loadTask"
                    , meshes
                    , this.productData.url
                    , "helmet.babylon");

                loadHelmetModel.onSuccess = (t) => {
                    this.engine.runRenderLoop(() => {
                        this.scene.render();
                    })
                }
                loader.load();
            },

            changeCamera: function (meshName) {
                const edittingMesh = this.productData.meshes.find(mesh => mesh.name == meshName);
                if(!edittingMesh){
                    console.log("Cannot find edditint mesh");
                    return;
                }
                this.camera.animations = [
                    this.createAnimation(
                        "beta",
                        this.camera.beta,
                        edittingMesh.cameraSetting.beta
                    ),
                    this.createAnimation(
                        "alpha",
                        this.camera.alpha,
                        edittingMesh.cameraSetting.alpha
                    ),
                    this.createAnimation(
                        "radius",
                        this.camera.radius,
                        edittingMesh.cameraSetting.radius
                    )
                ]

                var animationObject = this.scene.beginAnimation(this.camera, 0, 100, false, 4);
                animationObject.onAnimationEnd = function () {
                    console.log("Animation End");
                }
            },
            changeMaterial: function () {
                console.log("change material");
            },
            createAnimation: function (property, from, to) {

                const Frame_per_second = 60;
                var animation = new BABYLON.Animation(
                    "myAnimationcamera",
                    property,
                    30,
                    BABYLON.Animation.ANIMATIONTYPE_FLOAT,
                    BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT,
                );

                animation.setKeys([
                    {
                        frame: 0,
                        value: from
                    },
                    {
                        frame: 100,
                        value: to
                    }
                ])
                return animation;
            }
        },
        created: function () {
            console.log("created");
        }
    })

    // Make sure the page is loaded
    window.onload = (event) => {
        customizeApp.bootstrapApp();
    }


</script>