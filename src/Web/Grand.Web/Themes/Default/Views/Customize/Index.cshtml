@inject IPageHeadBuilder pagebuilder

@{
    Layout = "_SingleColumn";
}
<div id="customizeContainer">
    <canvas class="w-100" id="customizeCanvas"></canvas>
    <button @@click="customizeApp.changeCamera"> Change Camera</button>
    <button @@click="customizeApp.changeMaterial"> Change Texture</button>
</div>


<script asp-location="Footer" asp-order="301">
    // Working play ground https://playground.babylonjs.com/#3AQQI8#2
    var customizeApp = new Vue({
        data:{
            scene: null,
            camera: null,
            canvas: null, 
            light: null,
            cameraPositions:{                
            }
        },
        methods:{
            bootstrapApp: function(){ 
                
                this.canvas = document.getElementById("customizeCanvas");
                this.engine = new BABYLON.Engine(this.canvas, true);
                // This creates a basic Babylon Scene object (non-mesh)
                this.scene = new BABYLON.Scene(this.engine);
                this.camera = new BABYLON.ArcRotateCamera("camera", Math.PI * 0.9, BABYLON.Tools.ToRadians(60), 60, new BABYLON.Vector3(20, 10, -3), this.scene);
                this.camera.setTarget(new BABYLON.Vector3(0, 20, 0));
                
                this.camera.attachControl();

                // light
                this.light = new BABYLON.HemisphericLight("hemiLight", new BABYLON.Vector3(0, 40, 0), this.scene);

                // load model
                var loader = new BABYLON.AssetsManager(this.scene);
                var loadHelmetModel = loader.addMeshTask("helmetTask", ["helmet", "lottrong", "lotngoai", "lotcam", "quai", "quainum", "quaisau"], "https://raw.githubusercontent.com/namhoaingo/grandnode2Forked/Nam/resizeEvent/vue-balylon/b101/public/", "helmet.babylon");

                loadHelmetModel.onSuccess = (t) => {
                    this.engine.runRenderLoop(() => {
                        this.scene.render();
                    })
                }
                loader.load();
            },
            changeCamera: function(){
                console.log("Change camera posi");
                const newPosition = new BABYLON.Vector3(0,0,10);

                this.camera.animations = [
                    this.createAnimation(
                        "position.x",
                        this.camera.position.x,
                        newPosition.x
                    ),
                    this.createAnimation(
                        "position.y",
                        this.camera.position.y,
                        newPosition.y
                    ),
                    this.createAnimation(
                        "position.z",
                        this.camera.position.z,
                        newPosition.z
                    )

                ]

                var animationObject = this.scene.beginAnimation(this.camera, 0, 100, false, 4)
                animationObject.onAnimationEnd = function(){
                    console.log("Animation End");
                }


            },
            changeMaterial: function(){
                console.log("change material");
            },
            createAnimation: function(property, from, to){
                const ease = new BABYLON.CubicEase();
                ease.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);

                const Frame_per_second = 60;
                const animation = BABYLON.Animation.CreateAnimation(
                    property,
                    BABYLON.Animation.ANIMATIONTYPE_FLOAT,
                    Frame_per_second,
                    ease
                );

                animation.setKeys([
                    {
                        frame: 0,
                        value: from
                    },
                    {
                        frame: 100,
                        value: to
                    }
                ])
                return animation;
            }            
        },
        created: function () {
            console.log("created");            
        }
    })

    // Make sure the page is loaded
    window.onload = (event) => {
        customizeApp.bootstrapApp();
    }
    

</script>