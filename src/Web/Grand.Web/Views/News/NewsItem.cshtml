@model NewsItemModel
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_TwoColumns";

    //title
    pagebuilder.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    pagebuilder.AddMetaDescriptionParts(Model.MetaDescription);
    pagebuilder.AddMetaKeywordParts(Model.MetaKeywords);
}
<div class="page news-item-page">
    <div class="card mt-3">
        <div class="card-header">
            @if (!string.IsNullOrEmpty(Model.PictureModel.ImageUrl))
            {
                <b-img-lazy class="img-fluid mb-3" src="@Model.PictureModel.ImageUrl" alt="@Model.PictureModel.AlternateText"></b-img-lazy>
            }
            <h1 class="h5 mb-0">
                @Model.Title
            </h1>
            <span class="small text-muted">
                @Model.CreatedOn.ToString("D")
            </span>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "newsitem_page_before_body", additionalData = Model.Id })
        <div class="card-body">
            @Html.Raw(Model.Full)
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "newsitem_page_before_comments", additionalData = Model.Id })
    @if (Model.AllowComments)
    {
        <fieldset class="new-comment py-3 px-0" id="comments">
            <h5><strong>@Loc["News.Comments.LeaveYourComment"]</strong></h5>
            <div class="notifications">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                @{
                    var result = TempData["Grand.news.addcomment.result"] as string;
                }
                @if (!String.IsNullOrEmpty(result))
                {
                    <div class="result alert alert-info">@result</div>
                }
            </div>
            <validation-observer v-slot="{ handleSubmit }">
                <form asp-action="NewsCommentAdd" asp-controller="News" asp-route-sename="@Model.SeName" method="post" ref="form" v-on:submit.prevent="handleSubmit(formSubmit)">
                    <input type="hidden" name="newsItemId" value="@Model.Id" />
                    <fieldset class="form-group">
                        <validation-provider tag="div" rules="required" name="AddNewComment.CommentTitle" v-slot="{ errors, classes }">
                            <label asp-for="AddNewComment.CommentTitle" class="col-form-label">@Loc["News.Comments.CommentTitle"]:</label>
                            <span class="required">*</span>
                            <input asp-for="AddNewComment.CommentTitle" v-bind:class="[classes , 'form-control enter-comment-title']" v-model="news.CommentTitle" />
                            <span class="field-validation-error">{{ errors[0] }}</span>
                            <span asp-validation-for="AddNewComment.CommentTitle"></span>
                        </validation-provider>
                    </fieldset>
                    <fieldset class="form-group">
                        <validation-provider tag="div" rules="required" name="AddNewComment.CommentText" v-slot="{ errors, classes }">
                            <label asp-for="AddNewComment.CommentText" class="col-form-label">@Loc["News.Comments.CommentText"]:</label>
                            <span class="required">*</span>
                            <textarea asp-for="AddNewComment.CommentText" v-model="news.CommentText" v-bind:class="[classes , 'form-control']" autofocus="autofocus" rows="4"></textarea>
                            <span class="field-validation-error">{{ errors[0] }}</span>
                            <span asp-validation-for="AddNewComment.CommentText"></span>
                        </validation-provider>
                    </fieldset>
                    @if (Model.AddNewComment.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            <captcha />
                        </div>
                    }
                    <div class="buttons text-xs-center text-md-left generalMarginSupporter">
                        <input type="submit" name="add-comment" class="btn btn-info news-item-add-comment-button" value="@Loc["News.Comments.SubmitButton"]" />
                    </div>
                </form>
            </validation-observer>
        </fieldset>
        <script asp-location="Footer" asp-order="300">
                var news = new Vue({
                    data: () => ({
                        @{
                            <text>
                                CommentTitle: '',
                                CommentText: '',
                            </text>
                        }
                    })
                });
        </script>
        if (Model.Comments.Any())
        {
            <div class="comment-list">
                <h4 class="generalTitle generalMarginSupporter"><strong>@Loc["News.Comments"]</strong></h4>
                <div class="comments">
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="card mb-3">
                            <div class="card-header">
                                <div class="d-inline-flex w-100">
                                    <h6 class="mb-0">@comment.CustomerName</h6>
                                    <b-icon icon="calendar2-check" variant="info" class="mx-2"></b-icon>
                                    <small class="date text-muted">
                                        <span>@Loc["News.Comments.CreatedOn"]:</span>
                                        <span>@comment.CreatedOn.ToString("g")</span>
                                    </small>
                                </div>
                            </div>
                            <div class="card-body">
                                <h5>@comment.CommentTitle</h5>
                                @comment.CommentText
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "newsitem_page_after_comments", additionalData = Model.Id })
</div>