@model IList<AddressAttributeModel>
@{
    var prefix = ViewData.TemplateInfo.HtmlFieldPrefix;
}
@foreach (var attribute in Model)
{
    string controlId = string.Format("address_attribute_{0}", attribute.Id);
    string textPrompt = attribute.Name;

    <div class="inputs custom-attributes col-sm-12 mb-3">
        <label class="col-form-label" for="@(controlId)">@textPrompt:</label>
        @if (attribute.IsRequired)
        {
            <span class="required">*</span>
        }

        @switch (attribute.AttributeControlType)
        {
            case AttributeControlType.DropdownList:
                {
                    <validation-provider @if (attribute.IsRequired) { <text> rules="required" </text> } name="@(controlId)" v-slot="{ errors, classes }">
                        <select v-model="createorupdateaddress@{@prefix}.@(controlId)" data-val-required="@(string.Format(Loc["Fields.IsRequired"], textPrompt))" v-bind:class="[classes , 'custom-select form-control']" name="@(controlId)" id="@(controlId)">
                            @if (!attribute.IsRequired)
                            {
                                <option value="">---</option>
                            }
                            @foreach (var attributeValue in attribute.Values)
                            {
                                <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeValue.Name</option>
                            }
                        </select>
                        <span class="field-validation-error">{{ errors[0] }}</span>
                    </validation-provider>
                }
                break;
            case AttributeControlType.RadioList:
                {
                    <ul class="option-list pl-0">
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <li>
                                <validation-provider tag="li" vid="@(controlId)" @if (attribute.IsRequired) { <text> rules="required" </text> } v-slot="{ errors, classes }">
                                    <label for="@(controlId)_@(attributeValue.Id)" class="custom-control custom-radio">
                                        <input v-bind:class="[classes , 'custom-control-input']" data-val="true" data-val-required="@(string.Format(Loc["Fields.IsRequired"], textPrompt))" v-model="createorupdateaddress@{@prefix}.@(controlId)" id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@(attributeValue.Id)" checked="@attributeValue.IsPreSelected" />
                                        <span class="custom-control-label"></span>
                                        <span class="custom-control-description">@attributeValue.Name</span>
                                        <span class="field-validation-error d-flex w-100">{{ errors[0] }}</span>
                                    </label>
                                </validation-provider>

                            </li>
                        }
                    </ul>
                }
                break;
            case AttributeControlType.Checkboxes:
            case AttributeControlType.ReadonlyCheckboxes:
                {
                    <ul class="option-list pl-0">
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <validation-provider tag="li" vid="@(controlId)" @if (attribute.IsRequired) { <text> :rules="{ required: { allowFalse: false } }" </text> } v-slot="{ errors, classes }">
                                <label class="custom-control custom-checkbox">
                                    <input v-bind:class="[classes , 'custom-control-input']" data-val="true" data-val-required="@(string.Format(Loc["Fields.IsRequired"], textPrompt))" v-model="createorupdateaddress@{@prefix}.@(controlId)" id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@(attributeValue.Id)" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null) />
                                    <span class="custom-control-label"></span>
                                    <span class="custom-control-description">@attributeValue.Name</span>
                                    <span class="field-validation-error d-flex w-100">{{ errors[0] }}</span>
                                </label>
                            </validation-provider>
                        }
                    </ul>
                }
                break;
            case AttributeControlType.TextBox:
                {
                    <validation-provider @if (attribute.IsRequired) { <text> rules="required" </text> } name="@(controlId)" v-slot="{ errors, classes }">
                        <input name="@(controlId)" type="text"
                               id="@(controlId)" v-model="createorupdateaddress@{@prefix}.@(controlId)" data-val-required="@(string.Format(Loc["Fields.IsRequired"], textPrompt))" v-bind:class="[classes , 'form-control textbox']" />
                        <span class="field-validation-error">{{ errors[0] }}</span>
                    </validation-provider>
                }
                break;
            case AttributeControlType.MultilineTextbox:
                {
                    <validation-provider @if (attribute.IsRequired) { <text> rules="required" </text> } name="@(controlId)" v-slot="{ errors, classes }">
                        <textarea name="@(controlId)"
                                  id="@(controlId)" v-model="createorupdateaddress@{@prefix}.@(controlId)" data-val-required="@(string.Format(Loc["Fields.IsRequired"], textPrompt))" v-bind:class="[classes , 'form-control']"></textarea>
                        <span class="field-validation-error">{{ errors[0] }}</span>
                    </validation-provider>
                }
                break;
            case AttributeControlType.Datepicker:
            case AttributeControlType.FileUpload:
            case AttributeControlType.ColorSquares:
            case AttributeControlType.ImageSquares:
                {
                    //not support attribute type
                }
                break;
        }
    </div>
}
