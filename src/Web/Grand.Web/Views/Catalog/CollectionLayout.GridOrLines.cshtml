@model CollectionModel
@inject SeoSettings seoSettings
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_TwoColumns";
    pagebuilder.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    pagebuilder.AddMetaDescriptionParts(Model.MetaDescription);
    pagebuilder.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = seoSettings.CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var collectionUrl = Url.RouteUrl("Collection", new { Model.SeName }, Url.ActionContext.HttpContext.Request.Scheme);
        pagebuilder.AddCanonicalUrlParts(collectionUrl);
    }
}

<div class="page collection-page">
    <h1 class="generalTitle h2">@Model.Name</h1>
    @await Component.InvokeAsync("Widget", new { widgetZone = "collectiondetails_top", additionalData = Model.Id })
    @*Rendering description section*@
    @if (!string.IsNullOrWhiteSpace(Model.Description))
    {
        <div class="card collection-description">
            <div class="card-body">
                @Html.Raw(Model.Description)
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "collectiondetails_before_featured_products", additionalData = Model.Id })
    @*Rendering featured products section*@
    @if (Model.FeaturedProducts.Any())
    {
        <div class="page-separator"></div>
        <div class="col-12 product-grid featured-product-grid px-0">
            <h2 class="h5 text-left mb-3">
                <span>@Loc["Products.FeaturedProducts"]</span>
            </h2>
            <div class="form-row">
                <template v-for="Model in catalog.Model.FeaturedProducts">
                    <div class="col-lg-4 col-sm-6 col-6 product-container mb-2">
                        <partial name="Partials/CatalogProductGridView" />
                    </div>
                </template>                
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "collectiondetails_after_featured_products", additionalData = Model.Id })
    <div id="catalog-products">
        @await Component.InvokeAsync("Widget", new { widgetZone = "collectiondetails_before_filters", additionalData = Model.Id })
        <partial name="Partials/Selectors" />
        <template v-if="catalog.Model.Products.length > 0">
            <template v-if="catalog.Model.PagingFilteringContext.ViewMode == 'grid'">
                <div class="col-12 product-grid px-0">
                    <div class="form-row">
                        <template v-for="Model in catalog.Model.Products">
                            <div class="col-lg-4 col-sm-6 col-6 product-container mb-2">
                                <partial name="Partials/CatalogProductGridView" />
                            </div>
                        </template>
                    </div>
                </div>
            </template>
            <template v-else>
                <div class="product-list">
                    <div class="col-12">
                        <div class="row">
                            <template v-for="Model in catalog.Model.Products">
                                <partial name="Partials/CatalogProductListView" />
                            </template>
                        </div>
                    </div>
                </div>
            </template>
            <partial name="Partials/Pagination" />
        </template>
        <template v-else>
            <div class="alert alert-info my-3">
                @Loc["search.noresultstext"]
            </div>
        </template>
    </div>

    @*Rendering bottom description section*@
    @if (!string.IsNullOrWhiteSpace(Model.BottomDescription))
    {
        <div class="card collection-description">
            <div class="card-body">
                @Html.Raw(Model.BottomDescription)
            </div>
        </div>
    }

    @await Component.InvokeAsync("Widget", new { widgetZone = "collectiondetails_bottom", additionalData = Model.Id })
</div>

@section filters
    {
    @*Rendering filtering section*@
    @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
    {
        <partial name="Partials/Filtering"/>
    }
}

<partial name="Partials/ModelScript" model="@Json.Serialize(Model)" />