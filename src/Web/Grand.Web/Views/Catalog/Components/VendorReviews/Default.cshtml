@model VendorReviewsModel


@if (Model.AddVendorReview.NotAllowAnonymousUsersToReviewVendor)
{
    <div class="alert alert-danger">
        @Loc["VendorReviews.OnlyRegisteredUsersCanWriteReviews"]
    </div>
}
else
{
    <div class="mb-3">
        <a class="btn btn-info" @@click="vendorreviews.addVendorReview()">@Loc["Reviews.Overview.AddNew"]</a>
    </div>
}
<partial name="_VendorReview.Modal.cshtml" model="Model" />

<template id="vendor-review-list">
    <div class="vendor-review-list">
        <template v-if="vendorreviews.Model.Items.length > 0">
            <h5 class="mb-3"><strong>@Loc["Reviews.ExistingReviews"]</strong></h5>
            <template v-for="review in vendorreviews.Model.Items">
                <div class="card vendor-review-item mb-3">
                    <div class="card-header">
                        <div class="review-info d-inline-flex w-100">
                            <div class="user d-inline-flex align-items-center">
                                <small class="text-muted mr-2">@Loc["Reviews.From"]:</small>
                                <h6 class="mb-0">{{review.CustomerName}}</h6>
                            </div>
                            <b-icon icon="calendar2-check" variant="info" class="mx-2"></b-icon>
                            <small class="date text-muted">
                                <span class="ml-1">@Loc["Reviews.Date"]:</span>
                                <span>{{review.WrittenOnStr}}</span>
                            </small>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="review-title mb-3">
                            <h5 class="mb-0">{{review.Title}}</h5>
                            <b-form-rating id='rating-inline2' class='p-0' variant='warning' no-border size='sm' show-value precision='2' readonly inline :value='review.Rating'></b-form-rating>
                        </div>
                        <div class="review-content">
                            <div class="review-text">
                                {{review.ReviewText}}
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="vendor-review-helpfulness d-inline-flex justify-content-end align-items-center flex-wrap">
                            <span class="question">@Loc["Reviews.Helpfulness.WasHelpful?"]</span>
                            <span class="vote-options btn-group">
                                <span :id="'vote-yes-' + review.Helpfulness.VendorReviewId" @@click="vendorreviews.setVendorReviewHelpfulness('@Url.RouteUrl("SetVendorReviewHelpfulness")', 'true', review.Id, '@Model.VendorId', '@Loc[" Reviews.Helpfulness.WasHelpful?"]')" class="btn btn-sm btn-outline vote"><b-icon variant="success" icon="hand-thumbs-up"></b-icon></span>
                                <span :id="'vote-no-' + review.Helpfulness.VendorReviewId" @@click="vendorreviews.setVendorReviewHelpfulness('@Url.RouteUrl("SetVendorReviewHelpfulness")', 'false', review.Id, '@Model.VendorId', '@Loc[" Reviews.Helpfulness.WasHelpful?"]')" class="btn btn-sm btn-outline vote"><b-icon variant="danger" icon="hand-thumbs-down"></b-icon></span>
                            </span>
                            <span class="vote-stats d-inline-flex">
                                (<span :id="'helpfulness-vote-yes-' + review.Helpfulness.VendorReviewId">{{review.Helpfulness.HelpfulYesTotal}}</span>/<span :id="'helpfulness-vote-no-' + review.Helpfulness.VendorReviewId">{{review.Helpfulness.HelpfulNoTotal}}</span>)
                            </span>
                        </div>
                    </div>
                </div>
            </template>
        </template>
        <template v-else>
            <div class="alert alert-info">@Loc["Vendor.Reviews.Empty"]</div>
        </template>
    </div>
</template>

<script asp-location="Footer" asp-order="300">
    var vendorreviews = new Vue({
        data: function () {
            return {
                Model: null,
                rating: null,
                captcha: null,
            }
        },
        created() {
            this.Model = @Json.Serialize(Model);
        },
        methods: {
            setVendorReviewHelpfulness(url, wasHelpful, reviewId, vendorId, toastTitle) {
                axios({
                    url: url,
                    method: 'post',
                    params: { "vendorReviewId": reviewId, "vendorId": vendorId, "washelpful": wasHelpful },
                    headers: {
                        'X-Response-View': 'Json'
                    },
                }).then(function (response) {
                    document.getElementById("helpfulness-vote-yes-" + reviewId + "").innerHTML = response.data.TotalYes
                    document.getElementById("helpfulness-vote-no-" + reviewId + "").innerHTML = response.data.TotalNo;
                    new Vue({
                        el: ".modal-place",
                        methods: {
                            toast() {
                                this.$bvToast.toast(response.data.Result, {
                                    title: toastTitle,
                                    variant: 'info',
                                    autoHideDelay: 3000,
                                    solid: true
                                })
                            }
                        },
                        mounted: function () {
                            this.toast();
                        }
                    });
                }).catch(function (error) {
                    alert(error);
                })
            },
            addVendorReview: function () {
                vm.$refs['ModalVendorReview'].show();
            },
            modalReviewShown: function () {
                if (vendorreviews.Model.AddVendorReview.DisplayCaptcha && document.querySelector("#ModalVendorReview .captcha-box") == null && !vendorreviews.Model.AddVendorReview.SuccessfullyAdded) {
                    var html = document.getElementById("captcha-box");
                    document.getElementById("captcha-popup").prepend(html);
                }
                vendorreviews.Model = Object.assign({}, vendorreviews.Model, { ReviewTitle: '', ReviewText: '' })
            },
            modalReviewClose: function () {
                if (vendorreviews.Model.AddVendorReview.DisplayCaptcha && document.querySelector("#ModalVendorReview .captcha-box") !== null) {
                    var html = document.getElementById("captcha-box");
                    document.getElementById("captcha-container").prepend(html);
                }
            },
            submitVendorReview: function () {
                var form = document.getElementById("addReviewForm");
                var url = form.getAttribute("action");
                var resultTitle = form.getAttribute("data-title");
                var bodyFormData = new FormData(form);
                axios({
                    method: "post",
                    url: url,
                    data: bodyFormData,
                    headers: {
                        "Content-Type": "multipart/form-data",
                        'X-Response-View': 'Json'
                    },
                }).then(function (response) {
                    vendorreviews.Model = response.data;
                    vendorreviews.Model.Items = response.data.Items;

                    var result = response.data.AddVendorReview.Result;
                    var variant = "";

                    if (response.data.AddVendorReview.SuccessfullyAdded) {

                        variant = "info";
                        vm.$refs['ModalVendorReview'].hide();

                    } else {
                        variant = "danger";
                    }

                    new Vue({
                        el: ".modal-place",
                        methods: {
                            toast() {
                                this.$bvToast.toast(result, {
                                    title: resultTitle,
                                    variant: variant,
                                    autoHideDelay: 3000,
                                    solid: true
                                })
                            }
                        },
                        mounted: function () {
                            this.toast();
                        }
                    });

                    if (response.data.VendorReviewOverview !== null) {
                        vendorreviewsoverview.Model = response.data.VendorReviewOverview;
                    }
                });
                return
            }
        }
    });
</script>